{"version":3,"sources":["Square.js","Game.js","Constants.js","Overlay.js","BoardSquare.js","Knight.js","Board.js","serviceWorker.js","index.js"],"names":["Square","black","children","fill","stroke","style","backgroundColor","color","width","height","knightPosition","observer","emitChange","ItemTypes","Overlay","position","top","left","zIndex","BoardSquare","x","y","useDrop","accept","canDrop","toX","toY","dx","dy","Math","abs","canMoveKnight","drop","collect","monitor","isOver","ref","Knight","useDrag","item","type","isDragging","drag","preview","DragPreviewImage","connect","src","opacity","fontSize","fontWeight","cursor","renderSquare","i","floor","key","knightX","knightY","renderPiece","Board","squares","push","DndProvider","backend","HTML5Backend","display","flexWrap","Boolean","window","location","hostname","match","root","document","getElementById","o","Error","observe","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b8acfe43.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Square = ({ black, children }) => {\r\n    const fill = black ? 'black' : 'white'\r\n    const stroke = black ? 'white' : 'black'\r\n    return <div style={{\r\n        backgroundColor: fill,\r\n        color: stroke,\r\n        width: '100%',\r\n        height: '100%',\r\n    }} >{children}</div>\r\n}\r\n\r\nexport default Square;","let knightPosition = [1, 7]\r\nlet observer = null\r\n\r\nfunction emitChange() {\r\n  observer(knightPosition)\r\n}\r\n\r\nexport function observe(o) {\r\n  if (observer) {\r\n    throw new Error('Multiple observers not implemented.')\r\n  }\r\n\r\n  observer = o\r\n  emitChange()\r\n}\r\n\r\nexport function moveKnight(toX, toY) {\r\n  knightPosition = [toX, toY]\r\n  emitChange()\r\n}\r\n\r\nexport function canMoveKnight(toX, toY) {\r\n  const [x, y] = knightPosition\r\n  const dx = toX - x\r\n  const dy = toY - y\r\n\r\n  return (\r\n    (Math.abs(dx) === 2 && Math.abs(dy) === 1) ||\r\n    (Math.abs(dx) === 1 && Math.abs(dy) === 2)\r\n  )\r\n}","export const ItemTypes = {\r\n  KNIGHT: 'knight',\r\n}","import React from 'react'\r\n\r\nconst Overlay = ({ color }) => {\r\n    return (<div\r\n        style={{\r\n            position: 'absolute',\r\n            top: 0,\r\n            left: 0,\r\n            height: '100%',\r\n            width: '100%',\r\n            zIndex: 1,\r\n            // opacity: 0.5,\r\n            backgroundColor: color,\r\n        }}\r\n    />)\r\n}\r\n\r\nexport default Overlay;","import React from 'react'\r\nimport Square from './Square'\r\nimport { canMoveKnight, moveKnight } from './Game'\r\nimport { ItemTypes } from './Constants'\r\nimport { useDrop } from 'react-dnd'\r\nimport Overlay from './Overlay'\r\n\r\nfunction BoardSquare({ x, y, children }) {\r\n    const black = (x + y) % 2 === 1\r\n    const [{ isOver, canDrop }, drop] = useDrop({\r\n        accept: ItemTypes.KNIGHT,\r\n        canDrop: () => canMoveKnight(x, y),\r\n        drop: () => moveKnight(x, y),\r\n        collect: monitor => ({\r\n            isOver: !!monitor.isOver(),\r\n            canDrop: !!monitor.canDrop()\r\n        })\r\n    })\r\n\r\n    return (\r\n        <div\r\n            ref={drop}\r\n            style={{\r\n                position: 'relative',\r\n                width: '100%',\r\n                height: '100%',\r\n            }}>\r\n            <Square black={black}>{children}</Square>\r\n            {isOver && !canDrop && <Overlay color=\"red\" />}\r\n            {!isOver && canDrop && <Overlay color=\"yellow\" />}\r\n            {isOver && canDrop && <Overlay color=\"green\" />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BoardSquare","import React from 'react'\r\nimport { ItemTypes } from './Constants'\r\nimport { useDrag, DragPreviewImage } from 'react-dnd'\r\n\r\nfunction Knight() {\r\n    const [{ isDragging }, drag, preview] = useDrag({\r\n        item: { type: ItemTypes.KNIGHT },\r\n        collect: monitor => ({\r\n            isDragging: !!monitor.isDragging(),\r\n        }),\r\n    })\r\n\r\n    const knightImage = 'https://images.chesscomfiles.com/uploads/v1/landing/39.e476153d.300x300o.760c9f660e4a.jpg'\r\n    return (\r\n        <>\r\n            <DragPreviewImage connect={preview} src={knightImage} />\r\n            <div\r\n                ref={drag}\r\n                style={{\r\n                    opacity: isDragging ? 1 : 1,\r\n                    fontSize: \"5em\",\r\n                    fontWeight: 'bold',\r\n                    cursor: 'move'\r\n                }}>\r\n                â™˜\r\n    </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Knight","import React from 'react'\r\nimport BoardSquare from './BoardSquare'\r\nimport Knight from './Knight'\r\n// import { canMoveKnight, moveKnight } from './Game'\r\n\r\nimport { DndProvider } from 'react-dnd'\r\nimport HTML5Backend from 'react-dnd-html5-backend'\r\n\r\nfunction renderSquare(i, knightPosition) {\r\n    const x = i % 8\r\n    const y = Math.floor(i / 8)\r\n\r\n\r\n    return (\r\n        <div key={i} style={{ width: '12.5%', height: '100px' }}>\r\n            <BoardSquare x={x} y={y}>\r\n                {renderPiece(x, y, knightPosition)}\r\n            </BoardSquare>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nfunction renderPiece(x, y, [knightX, knightY]) {\r\n    if (x === knightX && y === knightY) {\r\n        return <Knight />\r\n    }\r\n}\r\n\r\n\r\nexport default function Board({ knightPosition }) {\r\n    const squares = []\r\n    for (let i = 0; i < 64; i++) {\r\n        squares.push(renderSquare(i, knightPosition))\r\n    }\r\n\r\n    return (\r\n        <DndProvider backend={HTML5Backend}>\r\n            <div\r\n                style={{\r\n                    width: '100%',\r\n                    height: '100%',\r\n                    display: 'flex',\r\n                    flexWrap: 'wrap',\r\n                }}>\r\n                {squares}\r\n            </div>\r\n        </DndProvider>\r\n\r\n    )\r\n\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Board from './Board';\nimport { observe } from './Game'\nimport * as serviceWorker from './serviceWorker';\n\nconst root = document.getElementById('root')\n\nobserve(knightPosition =>\n    ReactDOM.render(<Board knightPosition={knightPosition} />, root),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}